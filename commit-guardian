#!/usr/bin/env node

const express = require('express');
const { execSync, spawn } = require('child_process');
const path = require('path');
const fs = require('fs');
const open = require('open');

const app = express();
const PORT = 3456;

let server;
let approvalStatus = 'pending'; // 'pending', 'approved', 'rejected'
let commitMessage = '';
let comments = [];
let defaultCommitMessage = '';

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Check if we're in a git repository
function checkGitRepo() {
    try {
        execSync('git rev-parse --git-dir', { stdio: 'ignore' });
        return true;
    } catch {
        return false;
    }
}

// Get git diff data
function getDiffData() {
    try {
        // Get staged changes
        const staged = execSync('git diff --cached', { encoding: 'utf8' });
        
        // Get unstaged changes
        const unstaged = execSync('git diff', { encoding: 'utf8' });
        
        // Get status to show file states
        const status = execSync('git status --porcelain', { encoding: 'utf8' });
        
        // Parse status to get file info
        const files = status.split('\n')
            .filter(line => line.trim())
            .map(line => {
                const staged = line[0] !== ' ' && line[0] !== '?';
                const unstaged = line[1] !== ' ';
                const filename = line.slice(3);
                return { filename, staged, unstaged };
            });

        const stagedFiles = files.filter(f => f.staged);
        const unstagedFiles = files.filter(f => f.unstaged);
        
        return {
            staged,
            unstaged,
            files,
            stagedFiles,
            unstagedFiles,
            hasChanges: staged.length > 0 || unstaged.length > 0,
            hasStagedChanges: staged.length > 0
        };
    } catch (error) {
        console.error('Error getting git diff:', error.message);
        return { staged: '', unstaged: '', files: [], hasChanges: false };
    }
}


// API Routes
app.get('/api/diff', (req, res) => {
    const diffData = getDiffData();
    res.json(diffData);
});

app.get('/api/status', (req, res) => {
    res.json({ 
        status: approvalStatus,
        commitMessage: commitMessage,
        comments: comments,
        defaultCommitMessage: defaultCommitMessage
    });
});

app.post('/api/approve', (req, res) => {
    console.log('\\n🔄 Approval request received');
    console.log('Request body:', req.body);
    
    const { message, fileComments } = req.body;
    
    if (!message || message.trim() === '') {
        console.log('❌ No commit message provided');
        return res.status(400).json({ error: 'Commit message is required' });
    }
    
    commitMessage = message.trim();
    comments = fileComments || [];
    approvalStatus = 'approved';
    
    console.log('\n✅ Changes approved!');
    console.log(`📝 Commit message: ${commitMessage}`);
    
    if (comments.length > 0) {
        console.log('💬 Comments:');
        comments.forEach((comment, index) => {
            console.log(`   ${index + 1}. ${comment.file}:${comment.line} - ${comment.text}`);
        });
    }
    
    // Perform git commit (staged files only)
    try {
        console.log('🚀 Executing git commit...');
        console.log(`Command: git commit -m "${commitMessage}"`);
        
        execSync(`git commit -m "${commitMessage}"`, { stdio: 'inherit' });
        console.log('🎉 Successfully committed changes!');
        
        console.log('📤 Sending success response to browser...');
        res.json({ success: true, message: 'Changes committed successfully', autoClose: true });
        
        // Close server after successful commit (increased delay)
        setTimeout(() => {
            console.log('🚪 Shutting down server after successful commit...');
            process.exit(0);
        }, 5000);
        
    } catch (error) {
        console.error('❌ Error committing changes:', error.message);
        console.error('❌ Error details:', error);
        res.status(500).json({ error: `Failed to commit changes: ${error.message}` });
        approvalStatus = 'pending';
    }
});

app.post('/api/close', (req, res) => {
    console.log('\n👋 Browser tab closed - shutting down server...');
    res.json({ success: true });
    
    setTimeout(() => {
        process.exit(0);
    }, 500);
});

app.post('/api/reject', (req, res) => {
    const { fileComments } = req.body;
    
    approvalStatus = 'rejected';
    comments = fileComments || [];
    
    console.log('\n❌ Changes rejected');
    
    if (comments.length > 0) {
        console.log('\n📝 Review comments for LLM analysis:');
        console.log('='.repeat(50));
        
        comments.forEach((comment, index) => {
            console.log(`${index + 1}. File: ${comment.file}:${comment.line}`);
            console.log(`   Comment: ${comment.text}`);
            console.log('');
        });
        
        // Format for LLM
        console.log('\n🤖 LLM Analysis Format:');
        console.log('='.repeat(30));
        const analysisText = comments.map(comment => 
            `${comment.file}:${comment.line} - ${comment.text}`
        ).join('\n');
        console.log(analysisText);
    } else {
        console.log('ℹ️  No comments provided');
    }
    
    res.json({ success: true });
    
    // Longer delay for reject to ensure response is received
    setTimeout(() => {
        console.log('🚪 Shutting down server after rejection...');
        process.exit(1);
    }, 5000);
});

// Serve the HTML interface with diff2html
app.get('/', (req, res) => {
    const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Commit Guardian - Review Changes</title>
    <script src="https://cdn.tailwindcss.com"></script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            line-height: 1.4;
            background-color: #0d1117;
            color: #c9d1d9;
            font-size: 13px;
            padding-bottom: 100px; /* Space for fixed bottom bar */
        }
        
        .container {
            max-width: 1600px;
            margin: 0 auto;
            padding: 16px;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 12px;
            border-bottom: 1px solid #30363d;
        }
        
        .title {
            font-size: 18px;
            font-weight: 500;
            color: #e6edf3;
        }
        
        .diff-container {
            border: 1px solid #30363d;
            border-radius: 6px;
            background: #161b22;
            margin-bottom: 16px;
        }
        
        .file-header {
            padding: 8px 16px;
            background: #21262d;
            border-bottom: 1px solid #30363d;
            font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
            font-size: 12px;
            font-weight: 500;
            color: #e6edf3;
        }
        
        .collapsible-header {
            cursor: pointer;
            user-select: none;
            transition: background-color 0.2s;
        }
        
        .collapsible-header:hover {
            background: #2d333b;
        }
        
        .toggle-icon {
            display: inline-block;
            width: 16px;
        }
        
        .individual-file-header {
            padding: 6px 12px;
            background: #1c2128;
            border-bottom: 1px solid #30363d;
            font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
            font-size: 11px;
            font-weight: 500;
            color: #e6edf3;
        }
        
        .file-diff {
            margin-bottom: 12px;
            border: 1px solid #30363d;
            border-radius: 4px;
            background: #161b22;
        }
        
        .diff-content {
            overflow-x: auto;
        }
        
        .diff-line {
            display: flex;
            font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
            font-size: 12px;
            line-height: 1.4;
            position: relative;
        }
        
        .line-number {
            padding: 0 8px;
            background: #161b22;
            color: #8b949e;
            min-width: 50px;
            text-align: right;
            user-select: none;
            border-right: 1px solid #30363d;
            font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
            font-size: 11px;
        }
        
        .line-content {
            padding: 0 8px;
            flex: 1;
            white-space: pre;
            position: relative;
            font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
        }
        
        .diff-line.addition {
            background: #0d4429;
        }
        
        .diff-line.deletion {
            background: #5a1e1e;
        }
        
        .diff-line.addition .line-content {
            background: #0d4429;
        }
        
        .diff-line.deletion .line-content {
            background: #5a1e1e;
        }
        
        .diff-line:hover {
            background: #1c2128 !important;
        }
        
        .diff-line:hover .line-content {
            background: #1c2128 !important;
        }
        
        .approve-section {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: #161b22;
            border-top: 1px solid #30363d;
            padding: 12px 16px;
            z-index: 1000;
            box-shadow: 0 -4px 16px rgba(0, 0, 0, 0.4);
            border-radius: 12px 12px 0 0;
        }
        
        .approve-content {
            max-width: 1600px;
            margin: 0 auto;
            display: flex;
            gap: 12px;
            align-items: center;
        }
        
        .approve-title {
            font-size: 12px;
            font-weight: 500;
            color: #8b949e;
            margin: 0;
            white-space: nowrap;
            margin-right: 8px;
        }
        
        .commit-message {
            flex: 1;
            background: #0d1117;
            border: 1px solid #30363d;
            border-radius: 6px;
            color: #c9d1d9;
            padding: 8px 12px;
            font-family: inherit;
            font-size: 13px;
            resize: none;
            height: 36px;
            line-height: 1.4;
        }
        
        .commit-message:focus {
            outline: none;
            border-color: #238636;
            box-shadow: 0 0 0 2px rgba(35, 134, 54, 0.2);
        }
        
        .approve-actions {
            display: flex;
            gap: 8px;
            flex-shrink: 0;
        }
        
        .btn {
            padding: 8px 16px;
            border-radius: 6px;
            border: 1px solid;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.15s;
            white-space: nowrap;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .btn-success {
            background: #238636;
            border-color: #238636;
            color: #fff;
        }
        
        .btn-success:hover {
            background: #2ea043;
        }
        
        .btn-danger {
            background: #da3633;
            border-color: #da3633;
            color: #fff;
        }
        
        .btn-danger:hover {
            background: #f85149;
        }
        
        .comments-list {
            margin-top: 8px;
        }
        
        .comments-summary {
            font-size: 11px;
            color: #8b949e;
            margin-right: 12px;
        }
        
        .comment-item {
            background: #21262d;
            border: 1px solid #30363d;
            border-radius: 6px;
            padding: 8px 12px;
            margin-bottom: 6px;
        }
        
        .comment-meta {
            font-size: 11px;
            color: #8b949e;
            margin-bottom: 2px;
        }
        
        .no-changes {
            text-align: center;
            padding: 32px;
            color: #8b949e;
            background: #161b22;
            border: 1px solid #30363d;
            border-radius: 6px;
            margin: 16px 0;
            font-size: 13px;
        }
        
        .loading {
            text-align: center;
            padding: 32px;
            color: #8b949e;
            font-size: 13px;
        }
        
        
        /* Comment functionality styles */
        .comment-btn {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            background: #238636;
            color: white;
            border: none;
            border-radius: 3px;
            padding: 2px 6px;
            font-size: 10px;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.2s;
            z-index: 10;
        }
        
        .comment-btn:hover {
            background: #2ea043;
        }
        
        .diff-line:hover .comment-btn {
            opacity: 1;
        }
        
        .comment-form {
            background: #161b22;
            border: 1px solid #30363d;
            border-radius: 6px;
            margin: 8px;
            padding: 16px;
        }
        
        .comment-input {
            width: 100%;
            background: #0d1117;
            border: 1px solid #30363d;
            border-radius: 6px;
            color: #c9d1d9;
            padding: 8px 12px;
            font-family: inherit;
            resize: vertical;
            min-height: 80px;
        }
        
        .comment-actions {
            display: flex;
            gap: 8px;
            margin-top: 8px;
        }
        
        .btn-sm {
            padding: 6px 12px;
            font-size: 14px;
        }
        
        .btn-primary {
            background: #238636;
            border-color: #238636;
            color: #fff;
        }
        
        .btn-secondary {
            background: transparent;
            border-color: #30363d;
            color: #c9d1d9;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">🛡️ Commit Guardian - Review Changes</h1>
            <div id="fileStats" style="font-size: 11px; color: #8b949e;"></div>
        </div>
        
        <div id="content">
            <div class="loading">Loading changes...</div>
        </div>
        
        <div class="approve-section">
            <div class="approve-content">
                <span class="approve-title">Message:</span>
                <textarea 
                    id="commitMessage" 
                    class="commit-message" 
                    placeholder="Enter your commit message..."
                    required
                ></textarea>
                <span id="commentsCount" class="comments-summary"></span>
                <div class="approve-actions">
                    <button id="approveBtn" class="btn btn-success">✅ Approve</button>
                    <button id="rejectBtn" class="btn btn-danger">❌ Reject</button>
                </div>
            </div>
            <div id="commentsList" class="comments-list" style="display: none;"></div>
        </div>
    </div>
    <script src="/app.js"></script>
</body>
</html>`;
    
    res.send(htmlContent);
});

// Serve JavaScript separately to avoid template literal conflicts
app.get('/app.js', (req, res) => {
    res.type('application/javascript');
    const jsContent = `
        let diffData = null;
        let comments = [];
        let activeCommentForm = null;

        // Load initial data
        async function loadDiff() {
            try {
                console.log('Loading diff data...');
                const response = await fetch('/api/diff');
                
                if (!response.ok) {
                    throw new Error('HTTP error! status: ' + response.status);
                }
                
                diffData = await response.json();
                console.log('Diff data loaded:', diffData);
                
                renderDiff();
            } catch (error) {
                console.error('Error loading diff:', error);
                document.getElementById('content').innerHTML = '<div class="loading">Error loading changes: ' + error.message + '</div>';
            }
        }

        function renderDiff() {
            const content = document.getElementById('content');
            
            if (!diffData.hasChanges) {
                content.innerHTML = '<div class="no-changes">No changes to review</div>';
                updateFileStats();
                return;
            }

            let html = '';
            
            if (diffData.staged) {
                html += renderDiffSection('Staged Changes', diffData.staged, 'staged', false);
            }
            
            if (diffData.unstaged) {
                html += renderDiffSection('Unstaged Changes', diffData.unstaged, 'unstaged', true);
            }
            
            content.innerHTML = html;
            updateFileStats();
            attachCommentHandlers();
        }

        function renderDiffSection(title, diffText, type, collapsed) {
            if (!diffText || diffText.trim().length === 0) {
                return '';
            }
            
            const collapseId = 'collapse-' + type;
            const collapsedClass = collapsed ? ' style="display: none;"' : '';
            const icon = collapsed ? '▶' : '▼';
            
            let html = '<div class="diff-container">';
            html += '<div class="file-header collapsible-header" onclick="toggleCollapse(\\'' + collapseId + '\\')">';
            html += '<span class="toggle-icon">' + icon + '</span> ' + title;
            html += '</div>';

            html += '<div id="' + collapseId + '"' + collapsedClass + '>';
            html += parseDiff(diffText);
            html += '</div></div>';
            
            return html;
        }

        function parseDiff(diffText) {
            const lines = diffText.split('\\n');
            let html = '';
            let currentFile = null;
            let oldLineNum = 0;
            let newLineNum = 0;
            
            for (let i = 0; i < lines.length; i++) {
                const line = lines[i];
                
                if (line.startsWith('diff --git')) {
                    // New file diff
                    const match = line.match(/diff --git a\\/(.*) b\\/(.*)/);
                    if (match) {
                        currentFile = match[2];
                        if (html && !html.endsWith('</div>')) {
                            html += '</div>';
                        }
                        html += '<div class="file-diff">';
                        html += '<div class="individual-file-header">' + currentFile + '</div>';
                        html += '<div class="diff-content">';
                    }
                    continue;
                } else if (line.startsWith('index ') || line.startsWith('+++') || line.startsWith('---')) {
                    continue;
                } else if (line.startsWith('@@')) {
                    // Line number info
                    const match = line.match(/@@\\s*-?(\\d+)(?:,\\d+)?\\s*\\+?(\\d+)(?:,\\d+)?\\s*@@/);
                    if (match) {
                        oldLineNum = parseInt(match[1]) - 1;
                        newLineNum = parseInt(match[2]) - 1;
                    }
                    html += '<div class="diff-line" data-line-type="hunk">';
                    html += '<span class="line-number">...</span>';
                    html += '<span class="line-content">' + escapeHtml(line) + '</span>';
                    html += '</div>';
                    continue;
                }
                
                let lineType = 'context';
                let displayOldNum = '';
                let displayNewNum = '';
                let lineContent = line;
                
                if (line.startsWith('+')) {
                    lineType = 'addition';
                    newLineNum++;
                    displayNewNum = newLineNum;
                    lineContent = line.substring(1);
                } else if (line.startsWith('-')) {
                    lineType = 'deletion';
                    oldLineNum++;
                    displayOldNum = oldLineNum;
                    lineContent = line.substring(1);
                } else {
                    oldLineNum++;
                    newLineNum++;
                    displayOldNum = oldLineNum;
                    displayNewNum = newLineNum;
                    lineContent = line.substring(1);
                }
                
                const dataAttrs = currentFile ? ' data-file="' + escapeHtml(currentFile) + '" data-line="' + (displayNewNum || displayOldNum) + '"' : '';
                html += '<div class="diff-line ' + lineType + '"' + dataAttrs + '>';
                html += '<span class="line-number">';
                if (displayOldNum) html += displayOldNum;
                if (displayNewNum && displayOldNum) html += ' ';
                if (displayNewNum && displayNewNum !== displayOldNum) html += displayNewNum;
                html += '</span>';
                html += '<span class="line-content">' + escapeHtml(lineContent);
                if (lineType !== 'context') {
                    html += '<button class="comment-btn" title="Add comment">💬</button>';
                }
                html += '</span></div>';
            }
            
            if (html && !html.endsWith('</div>')) {
                html += '</div></div>';
            }
            
            return html;
        }
        
        function toggleCollapse(id) {
            const element = document.getElementById(id);
            const header = element.previousElementSibling;
            const icon = header.querySelector('.toggle-icon');
            
            if (element.style.display === 'none') {
                element.style.display = 'block';
                icon.textContent = '▼';
            } else {
                element.style.display = 'none';
                icon.textContent = '▶';
            }
        }


        function updateFileStats() {
            const fileStatsEl = document.getElementById('fileStats');
            if (!diffData || !diffData.stagedFiles) {
                fileStatsEl.innerHTML = '';
                return;
            }
            
            const stagedCount = diffData.stagedFiles.length;
            const unstagedCount = diffData.unstagedFiles ? diffData.unstagedFiles.length : 0;
            
            let html = '';
            if (stagedCount > 0) {
                html += '<span class=\"text-green-400\">' + stagedCount + ' staged</span>';
            }
            if (unstagedCount > 0) {
                if (html) html += ', ';
                html += '<span class=\"text-yellow-400\">' + unstagedCount + ' unstaged</span>';
            }
            
            fileStatsEl.innerHTML = html;
        }

        function getStatusIcon(status) {
            switch (status) {
                case 'A': return '<span style="color: #238636;">+</span>'; // Added (green)
                case 'D': return '<span style="color: #da3633;">−</span>'; // Deleted (red)
                case 'M': return '<span style="color: #bf8700;">●</span>'; // Modified (yellow)
                case 'R': return '<span style="color: #1f6feb;">→</span>'; // Renamed (blue)
                default: return '<span style="color: #bf8700;">●</span>'; // Default modified
            }
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function showCommentForm(file, line, button) {
            console.log('showCommentForm called with:', file, line);
            
            // Remove any existing comment form
            if (activeCommentForm) {
                activeCommentForm.remove();
                activeCommentForm = null;
            }

            // Find the diff line element
            const targetLine = button.closest('.diff-line');
            if (!targetLine) {
                console.error('Could not find target line for comment form');
                return;
            }

            const form = document.createElement('div');
            form.className = 'comment-form';
            
            const textarea = document.createElement('textarea');
            textarea.className = 'comment-input';
            textarea.placeholder = 'Add a comment...';
            
            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'comment-actions';
            
            const addBtn = document.createElement('button');
            addBtn.className = 'btn btn-primary btn-sm';
            addBtn.textContent = 'Add Comment';
            addBtn.onclick = (e) => {
                e.preventDefault();
                console.log('Add comment clicked for:', file, line);
                addComment(file, line, addBtn);
            };
            
            const cancelBtn = document.createElement('button');
            cancelBtn.className = 'btn btn-secondary btn-sm';
            cancelBtn.textContent = 'Cancel';
            cancelBtn.onclick = (e) => {
                e.preventDefault();
                console.log('Cancel clicked');
                cancelComment(cancelBtn);
            };
            
            actionsDiv.appendChild(addBtn);
            actionsDiv.appendChild(cancelBtn);
            form.appendChild(textarea);
            form.appendChild(actionsDiv);
            
            // Insert after the target line
            targetLine.insertAdjacentElement('afterend', form);
            
            activeCommentForm = form;
            textarea.focus();
            
            console.log('Comment form added successfully');
        }

        function addComment(file, line, button) {
            console.log('addComment called with:', file, line);
            
            const form = button.closest('.comment-form');
            if (!form) {
                console.error('Could not find comment form');
                return;
            }
            
            const input = form.querySelector('.comment-input');
            if (!input) {
                console.error('Could not find comment input');
                return;
            }
            
            const text = input.value.trim();
            console.log('Comment text:', text);
            
            if (!text) {
                alert('Please enter a comment');
                return;
            }
            
            comments.push({ file, line, text });
            console.log('Comment added, total comments:', comments.length);
            
            // Remove the form
            if (activeCommentForm) {
                activeCommentForm.remove();
                activeCommentForm = null;
            }
            
            updateCommentsList();
        }

        function cancelComment(button) {
            console.log('cancelComment called');
            
            const form = button.closest('.comment-form');
            if (form) {
                form.remove();
            }
            
            if (activeCommentForm) {
                activeCommentForm.remove();
                activeCommentForm = null;
            }
        }

        function updateCommentsList() {
            const list = document.getElementById('commentsList');
            const countEl = document.getElementById('commentsCount');
            
            if (comments.length === 0) {
                list.innerHTML = '';
                list.style.display = 'none';
                countEl.textContent = '';
                return;
            }
            
            // Update counter
            countEl.textContent = comments.length + ' comment' + (comments.length !== 1 ? 's' : '');
            
            // Build comments HTML
            let html = '';
            comments.forEach((comment, index) => {
                html += '<div class="comment-item" style="margin-bottom: 4px; padding: 6px 8px;">';
                html += '<div class="comment-meta">' + comment.file + ':' + comment.line + '</div>';
                html += '<div style="font-size: 12px; margin: 2px 0;">' + escapeHtml(comment.text) + '</div>';
                html += '<button class="btn btn-secondary" style="margin-top: 4px; padding: 2px 6px; font-size: 10px;" onclick="removeComment(' + index + ')">Remove</button>';
                html += '</div>';
            });
            
            list.innerHTML = html;
            list.style.display = 'block';
        }

        function removeComment(index) {
            comments.splice(index, 1);
            updateCommentsList();
        }

        function attachCommentHandlers() {
            // Add click handlers for comment buttons
            const commentButtons = document.querySelectorAll('.comment-btn');
            
            commentButtons.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const line = btn.closest('.diff-line');
                    if (!line) return;
                    
                    const file = line.getAttribute('data-file') || 'unknown';
                    const lineNum = line.getAttribute('data-line') || '0';
                    
                    console.log('Comment button clicked for:', file, lineNum);
                    showCommentForm(file, lineNum, btn);
                });
            });
        }

        // Load default commit message
        async function loadDefaultMessage() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                if (data.defaultCommitMessage) {
                    document.getElementById('commitMessage').value = data.defaultCommitMessage;
                }
            } catch (error) {
                console.error('Error loading default message:', error);
            }
        }

        // Approve/Reject handlers
        document.addEventListener('DOMContentLoaded', function() {
            loadDefaultMessage();
            
            // View mode buttons removed as we're back to simple diff view
            
            document.getElementById('approveBtn').addEventListener('click', async () => {
                const message = document.getElementById('commitMessage').value.trim();
                
                console.log('Approve button clicked, message:', message);
                console.log('Comments:', comments);
                
                if (!message) {
                    alert('Please enter a commit message');
                    return;
                }
                
                try {
                    console.log('Sending approval request...');
                    const response = await fetch('/api/approve', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            message: message,
                            fileComments: comments 
                        })
                    });
                    
                    console.log('Response status:', response.status);
                    console.log('Response ok:', response.ok);
                    
                    const result = await response.json();
                    console.log('Response result:', result);
                    
                    if (result.success) {
                        // Status element was removed, so skip status updates
                        
                        if (result.autoClose) {
                            // Show success message briefly, then close
                            document.body.innerHTML = '<div style="display: flex; justify-content: center; align-items: center; height: 100vh; background: #0d1117; color: #238636; font-size: 24px; font-family: -apple-system, BlinkMacSystemFont, \\'Segoe UI\\', Roboto, sans-serif;">✅ Changes committed successfully! Closing...</div>';
                            setTimeout(() => {
                                window.close();
                            }, 2000);
                        } else {
                            alert('Changes approved and committed successfully!');
                        }
                    } else {
                        console.error('Approval failed:', result);
                        alert('Error: ' + (result.error || 'Unknown error occurred'));
                    }
                } catch (error) {
                    console.error('Error approving changes:', error);
                    alert('Error approving changes: ' + error.message);
                }
            });

            document.getElementById('rejectBtn').addEventListener('click', async () => {
                if (confirm('Are you sure you want to reject these changes?')) {
                    console.log('Reject button clicked');
                    console.log('Comments to send:', comments);
                    
                    try {
                        console.log('Sending reject request...');
                        const response = await fetch('/api/reject', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ 
                                fileComments: comments 
                            })
                        });
                        
                        console.log('Reject response status:', response.status);
                        console.log('Reject response ok:', response.ok);
                        
                        if (response.ok) {
                            // Status element was removed, so skip status updates
                            
                            // Show rejection confirmation
                            let message = 'Changes rejected';
                            if (comments.length > 0) {
                                message += '\\nYour ' + comments.length + ' comment(s) have been formatted for LLM analysis.';
                            }
                            
                            alert(message);
                        }
                    } catch (error) {
                        console.error('Error rejecting changes:', error);
                        alert('Error rejecting changes: ' + error.message);
                    }
                }
            });

            // Load diff on page load
            loadDiff();
        });
    `;
    res.send(jsContent);
});

// Parse command line arguments
function parseArgs() {
    const args = process.argv.slice(2);
    const options = {
        message: '',
        help: false
    };
    
    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        if (arg === '--help' || arg === '-h') {
            options.help = true;
        } else if (arg === '--message' || arg === '-m') {
            if (i + 1 < args.length) {
                options.message = args[i + 1];
                i++; // Skip next argument
            } else {
                console.error('❌ Error: --message requires a value');
                process.exit(1);
            }
        } else if (arg.startsWith('--message=')) {
            options.message = arg.substring('--message='.length);
        } else if (arg.startsWith('-m=')) {
            options.message = arg.substring('-m='.length);
        } else if (!arg.startsWith('-')) {
            // Treat as commit message if no flag
            options.message = arg;
        } else {
            console.error(`❌ Error: Unknown option ${arg}`);
            console.error('Use --help for usage information');
            process.exit(1);
        }
    }
    
    return options;
}

function showHelp() {
    console.log(`
🛡️ Commit Guardian - Review changes before commit

Usage: commit-guardian -m <commit-message> [options]

Options:
  -m, --message <msg>    Commit message (REQUIRED)
  -h, --help            Show this help message

Examples:
  commit-guardian -m "Add new feature"
  commit-guardian --message "Fix bug in login"  
  commit-guardian -m "Update documentation"
  
  # Alternative (both commands work identically):
  commit-guardian -m "Your commit message"

Features:
  • GitHub-style diff viewer in browser
  • Line-by-line commenting system
  • Approval workflow before committing
  • Shows both staged and unstaged changes
  • Auto-closes browser after successful commit
`);
}

// Main function
function main() {
    const options = parseArgs();
    
    if (options.help) {
        showHelp();
        process.exit(0);
    }
    
    // Check if commit message is provided (required)
    if (!options.message || options.message.trim() === '') {
        console.error('❌ Error: Commit message is required');
        console.error('Usage: commit-guardian -m "commit message"');
        console.error('Use --help for more information');
        process.exit(1);
    }
    
    // Set commit message
    defaultCommitMessage = options.message.trim();
    
    console.log('🛡️ Commit Guardian - Review changes before commit\n');
    
    // Check if we're in a git repository
    if (!checkGitRepo()) {
        console.error('❌ Error: Not in a git repository');
        process.exit(1);
    }
    
    // Check if there are any changes
    const diffData = getDiffData();
    if (!diffData.hasChanges) {
        console.log('ℹ️  No changes to review');
        process.exit(0);
    }
    
    // Check if there are staged changes
    if (!diffData.hasStagedChanges) {
        console.error('❌ Error: No staged changes found');
        console.error('');
        console.error('You need to stage files before committing.');
        console.error('Please use git add to stage specific files:');
        console.error('');
        
        if (diffData.unstagedFiles.length > 0) {
            console.error('📋 Unstaged files that can be added:');
            diffData.unstagedFiles.forEach(file => {
                console.error(`   git add ${file.filename}`);
            });
            console.error('');
        }
        
        console.error('💡 Avoid using:');
        console.error('   git add .     (adds all files)');
        console.error('   git add -A    (adds all files)');
        console.error('');
        console.error('Instead, add files individually for better control.');
        process.exit(1);
    }
    
    console.log('📊 Changes detected:');
    if (diffData.staged) {
        console.log('  • Staged changes found');
    }
    if (diffData.unstaged) {
        console.log('  • Unstaged changes found');
    }
    
    if (defaultCommitMessage) {
        console.log(`📝 Default commit message: "${defaultCommitMessage}"`);
    }
    
    // Start server
    server = app.listen(PORT, () => {
        const url = `http://localhost:${PORT}`;
        console.log(`\n🚀 Review server started at ${url}`);
        console.log('🌐 Opening browser...');
        
        // Open browser
        open(url).catch(err => {
            console.log('⚠️  Could not open browser automatically');
            console.log(`   Please open ${url} manually`);
        });
        
        console.log('\n⏳ Waiting for your review...');
        console.log('   • Review changes in browser');
        console.log('   • Add comments if needed');
        console.log('   • Approve to commit or reject to cancel');
        console.log('\nPress Ctrl+C to cancel');
        
    });
    
    // Handle process termination
    process.on('SIGINT', () => {
        console.log('\n\n👋 Review cancelled');
        process.exit(0);
    });
    
    process.on('SIGTERM', () => {
        console.log('\n\n👋 Review cancelled');
        process.exit(0);
    });
}

// Check for required dependencies
try {
    require.resolve('express');
    require.resolve('open');
} catch (error) {
    console.error('❌ Missing dependencies. Please install:');
    console.error('   npm install express open');
    process.exit(1);
}

if (require.main === module) {
    main();
}